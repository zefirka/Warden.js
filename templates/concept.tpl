<div class='row'>
	<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12">
		<h2>Event-driven development</h2>
		<p>Современные веб-приложения требуют от разработчков все больше усилий, чтобы удовлетворить несколько требований современного рынка. Большая часть усилий сконцентророванна на том, чтобы обеспечить конечному пользователю отзывчивый дизайн, под которым мы понимаем немедленную реакцию приложения, удобный UI. Не менее важной частью является отказоустойчивость, - в идеале возможность работы в оффлайне, или хотя-бы гарантия безопасности на случай сбоев, как сетевых, так и технологических. Автономная работа. Коллаборативная работа. А ведь есть еще требования, которые необходимо удовлетворять, чтобы приложение вообще могло эволюционировать. Масштабируемость, модульность (слабая связность компонентов), декларативность и прочее... </p>
		<p>Реализовать это кажется сложной затеей, особенно учитывая те инструменты, что мы имеем.</p>
		<p>С самого начала, и до сих пор, единственный способ огранизовать взаимодействие пользователя с DOM были события. И это проблема. Большинство современных фремворков и библиотек имеют свое решение. Причем, каждая технология решает лишь часть проблемы. В лучшем случае, она не порождает новые проблемы (как например jQuery).</p>
		<h3>Сложность EDD</h3>
		<div class='g-img-container'>
			<img src="assets/images/comp.png">
		</div>

		<h2>Functional Reactive Programming</h2>
		<p>Functional reacitve programming brings declarative style into EDD applications by represeting events as sources of data. You implement events processing as processing streams of data, combining and composing them.</p> 
		<div class='g-img-container'>
			<img src="assets/images/frpstream.png">
		</div>
		<h2>Trade-off</h2>
	</div>
</div>
<div class='row'>

	<div class='g-img-container col-md-6 col-lg-6 col-xs-12 col-sm-12'>
		<img src="assets/images/component.png">
	</div>
	<div class='g-img-container col-md-6 col-lg-6 col-xs-12 col-sm-12'>
		<p>В Warden.js предоставлена возможность создавать модули, которые инкапсулируют внутри себя изменяемое состояние. Единственным условием, что внутренние функции компонента не должны изменять состояния других систем или внешнего состояния.</p>
	</div>
</div>
