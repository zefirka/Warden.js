<div class='row'>
	<div class="col-md-12 col-sm-12 col-xs-12 col-lg-12">
		<h2>Event-driven programming</h2>
		<p>С каждым днем веб-приложения требуют от разработчков все больше усилий, чтобы удовлетворить требования современного рынка. Большая часть усилий сконцентророванна на том, чтобы дать пользователю отзывчивый дизайн, под которым мы понимаем немедленную реакцию приложения, удобный UI. Не менее важной частью является отказоустойчивость, - в идеале возможность работы в оффлайне, или хотя-бы гарантия безопасности на случай сбоев, как сетевых, так и технологических. Автономная работа. Коллаборативная работа. А ведь есть еще требования, которые необходимо удовлетворять, чтобы приложение вообще могло эволюционировать. Масштабируемость, модульность (слабая связность компонентов), декларативность и прочее... </p>
		<p>Реализовать это кажется сложной затеей, особенно учитывая те инструменты, что мы имеем.</p>
		<p>С самого начала, и до сих пор, единственный способ огранизовать взаимодействие пользователя с DOM были события. И это проблема. Большинство современных фремворков и библиотек имеют свое решение. Причем, каждая технология решает лишь часть проблемы. В лучшем случае, она не порождает новые проблемы (как например jQuery).</p>
		
		<h3>Сложность EDD</h3>
		<p>ИЗ event-driven программирования с необходимостью следует асинхронность. Одной из главных проблем асинхронного программирования является сложность координации действий, которые меняют состояние. Кроме событийной модели в понятие асинхронности может входить много, так как термин сильно перегружен. Работа в оффлайне, неблокирующая многопоточность - все это частные случаи асинхронности. </p>
		<p></p>
		<div class='g-img-container'>
			<img src="assets/images/comp.png">
		</div>
		<p>Разные среды и языки предоставляют разные подоходы к решению общих проблем. Например функциональные языки (Clojure, Scala) предлагают найти решение в иммутабельных структурах данных и программной транзакционной памяти (STM). </p>
		<p>Основной сложностью JavaScript для реализации скоординированной системы транзакций - является DOM. Даже при условии иммутабельных структур данных, не всегда очевидно в какой момент должно произойти изменние в DOM.</p>

		<h2>Functional Reactive Programming</h2>
		<p>Одним из довольно распространенных решений для JavaScript - является реализация идей Functional Reactive Programming. ФРП предлагает решение проблемы через функциональный подход. Ключевой составляющей является события - как источники данных, чистые функции - как обработчики, распространение изменений - как механизм обновления состояния. Если вы пользовались React, это может вам показаться знакомым. Это не удивительно т.к. действительно функциональный подход вынудит вас ограничить список побочных действий, до обновления </p>
		<p>Наиболее успешным примером может служить стек React + ClojureScript + Javelin</p>
		<div class='g-img-container'>
			<img src="assets/images/frpstreams.png">
		</div>
		<h2>Trade-off</h2>
		<p>К сожалению, у нас не всегда есть возможность использовать FRP в том виде, в котором он реализован на JavaScript. Как правило внедрение "элементов" FRP может оставить неприятный осадок. Чаще всего у нас просто нет возможности внести те структурные изменения, которые необходимы для большинства библиотек. Warden.js же не требует никакого бекграунда, никакой особой архитектуры. В этом положительный момент гибкости Warden.js - его очень легко внедрять в готовые проекты.</p>
		
	</div>
</div>
<div class='row'>
	<div class='g-img-container col-md-6 col-lg-6 col-xs-12 col-sm-12'>
		<img src="assets/images/component.png">
	</div>
	<div class='g-img-container col-md-6 col-lg-6 col-xs-12 col-sm-12'>
		<p>В Warden.js предоставлена возможность создавать модули, которые инкапсулируют внутри себя изменяемое состояние. Единственным условием, что внутренние функции компонента не должны изменять состояния других систем или внешнего состояния.</p>
	</div>
</div>
<div class='row'>
	<div class='com-md-12 col-lg-12 col-sm-12 col-xs-12'>
		<div class='g-img-container'>
			<img src="assets/images/dom.png">
		</div>
	</div>
</div>